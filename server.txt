import dotenv from "dotenv";
import express from "express";
import cors from "cors";
import Joi from "joi";
import { MongoClient } from "mongodb";

dotenv.config();

const app = express();
const serverPort = process.env.SERVER_PORT || 8000;
const dbConnectionUrl = process.env.DB_URI;

const client = new MongoClient(dbConnectionUrl);

client.connect(dbConnectionUrl, function (err, client) {
  const collection = client.db("University").collection("Individuals");
  client.close();
});

app.use(cors());
// app.use(cors({ origin: "http://localhost:3002" }));
//only allow api requests from that originate from the above url
app.use(express.json()); //also a middleware

const persons = [];

app.get("/", (req, res) => {
  res.send({ persons });
});

app.get("/person", (req, res) => {
  res.send(persons);
});

app.get("/person/:id", (req, res, next) => {
  const selectedPerson = persons.find(
    (person) => person.id === parseInt(req.params.id)
  );

  if (!selectedPerson) {
    const error = new Error("Person not found");
    error.status = 404;
    next(error);
  } else {
    res.send(selectedPerson);
  }
});

app.post("/person", (req, res, next) => {
  const schema = Joi.object({
    firstName: Joi.string().required(),
    lastName: Joi.string().required(),
    course: Joi.string().required(),
    age: Joi.number().required(),
  });
  const { error: validationError } = schema.validate(req.body);

  if (validationError) {
    const error = new Error(validationError.message);
    error.status = 400;
    res.status(400).send(validationError.message);
    next(error);
    return;
  } else {
    const addPerson = {
      id: persons.length + 1,
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      age: req.body.age,
      course: req.body.course,
    };
    persons.push(addPerson);
    res.send(addPerson);
    console.log({ persons });
  }
});

app.get("/person/:birthMonth/:birthYear", (req, res) => {
  // http://localhost:8000/person/12/5?sortBy=name
  res.send(req.query);
});

app.get("/error", (_req, _res, next) => {
  const error = new Error("Internal Server Error");
  error.status = 500;

  next(error);
});

// app.get("/error", (_req, _res, next) => {
//   const error = new Error("Internal Server Error");
//   error.status = 500;

//   next(error);
// });

app.use((err, _req, res, _next) => {
  //params need to be in this order and needs to include them all
  //the .use method needs to be placed AFTER the route handlers
  res.status(err.statusCode || 500);
  res.json({ error: err.message || "Something went wrong! Please try again!" });
});

app.listen(serverPort, () => {
  console.log(`Server is running at http://localhost:${serverPort}`);
});
